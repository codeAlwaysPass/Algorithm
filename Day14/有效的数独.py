# 请你判断一个 9 x 9 的数独是否有效。只需要根据以下规则 ，验证已经填入的数字是否有效即可。
# 数字 1-9 在每一行只能出现一次。
# 数字 1-9 在每一列只能出现一次。
# 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
# 注意：
# 一个有效的数独（部分已被填充）不一定是可解的。
# 只需要根据以上规则，验证已经填入的数字是否有效即可。
# 空白格用 '.' 表示。


def isValidSudoku(board):
    for i in range(9):
        sr, sc, ss = set(), set(), set()
        for j in range(9):
            if board[i][j] != ".":
                if board[i][j] in sr or board[i][j] in sc:
                    return False
                sr.add(board[i][j])
                sc.add(board[i][j])
            # 转换为第row个矩阵的第col个数, 最大为[8,8]
            row, col = i // 3 * 3 + j // 3, i % 3 * 3 + j % 3
            print([row, col], [i, j])
            if board[row][col] != ".":
                if board[row][col] in ss:
                    return False
                ss.add(board[row][col])

    return True


arr = [
    ["5", "3", ".", ".", "7", ".", ".", ".", "."],
    ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    [".", "9", "8", ".", ".", ".", ".", "6", "."],
    ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    [".", "6", ".", ".", ".", ".", "2", "8", "."],
    [".", ".", ".", "4", "1", "9", ".", ".", "5"],
    [".", ".", ".", ".", "8", ".", ".", "7", "9"],
]
print(isValidSudoku(arr))
